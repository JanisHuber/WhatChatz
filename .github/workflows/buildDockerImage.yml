name: Create and publish Docker Compose images

on:
  push:
    branches: [ 'main' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: janishuber/whatchatz

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create environment.prod.ts
        run: |
          mkdir -p whatchatz-frontend/src/environments
          cat <<EOF > whatchatz-frontend/src/environments/environment.prod.ts
          export const environment = {
            production: true,
            firebaseConfig: {
              apiKey: "${{ secrets.FIREBASE_API_KEY }}",
              authDomain: "${{ secrets.FIREBASE_AUTH_DOMAIN }}",
              projectId: "${{ secrets.FIREBASE_PROJECT_ID }}",
              storageBucket: "${{ secrets.FIREBASE_STORAGE_BUCKET }}",
              messagingSenderId: "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}",
              appId: "${{ secrets.FIREBASE_APP_ID }}",
              measurementId: "${{ secrets.FIREBASE_MEASUREMENT_ID }}"
            },
            apiUrl: "${{ secrets.API_URL }}",
            wsUrl: "${{ secrets.WS_URL }}"
          };
          EOF
      - name: Create default environment.ts
        run: |
          mkdir -p whatchatz-frontend/src/environments
          cat <<EOF > whatchatz-frontend/src/environments/environment.ts
          export const environment = {
            production: false,
            firebaseConfig: {},
            apiUrl: '',
            wsUrl: ''
          };
          EOF

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build backend WAR file
        run: mvn clean package --file whatchatz-backend/pom.xml

      - name: Write firebase.json
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > ./whatchatz-backend/firebase.json

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend image
        id: backend
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest ./whatchatz-backend
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest | tee push_output.txt
          DIGEST=$(grep -o 'sha256:[a-f0-9]\{64\}' push_output.txt | tail -n1)
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"

      - name: Build and push frontend image
        id: frontend
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest ./whatchatz-frontend
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest | tee push_output.txt
          DIGEST=$(grep -o 'sha256:[a-f0-9]\{64\}' push_output.txt | tail -n1)
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"


      - name: Attest backend image
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          subject-digest: ${{ steps.backend.outputs.digest }}
          push-to-registry: true

      - name: Attest frontend image
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          subject-digest: ${{ steps.frontend.outputs.digest }}
          push-to-registry: true

      - name: Call Hetzner Webhook
        run: |
          curl -X POST ${{ secrets.DEPLOY_WEBHOOK_URL }}
